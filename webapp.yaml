apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment # name for deployment
  labels:
    app: webapp #unique name, good practice to use.
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp # unique lable which identifies. matches the template name to group
  template:      #1.blueprint to configure containers as pods
    metadata:
      labels:
        app: webapp # unique label/identifier for template. each pods will share same name. req field for template.
    spec:
      containers:
      - name: webapp # AppName Referece.
        image: nanajanashia/k8s-demo-app:v1.0 # this is where docker image for node js
        ports:
        - containerPort: 3000 #where mongo service would run
        env:
        - name: USER_NAME
          valueFrom:                          # Pass env variables as indicated below.
            secretKeyRef:
              name: mongo-secret
              key: mongo-user                 # value will be picked from secret file.
        - name: USER_PWD
          valueFrom:                          # Pass env variables as indicated below.
            secretKeyRef:
              name: mongo-secret
              key: mongo-password                 # value will be picked from secret file.
        - name: DB_URL
          valueFrom:                          # Pass env variables from mongo config.
            configMapKeyRef:
              name: mongo-config
              key: mongo-url                 # value will be picked from config file.
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-service # via this service mongodb will be accessed.
spec:
  type: NodePort # default is ClusterIP which is for internal service.
  selector:
    app.kubernetes.io/name: webapp # service will find pods by this name.
  ports:
    - protocol: TCP
      port: 3000 # where request enters and forwards to target port.best practice.
      targetPort: 3000  # where service would run.
      nodePort: 30107 # should be in range as explained 30000-36000